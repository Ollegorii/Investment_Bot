import asyncio
import datetime
import pandas as pd
from typing import List
from User import *
from Controller import *
from dcs import UpdateObj


class Logic:
    def __init__(self, UI_queue: asyncio.Queue, queue: asyncio.Queue, concurrent_workers: int, gauth):
        self.queue = queue
        self.__UI_queue = UI_queue
        self.__users = pd.read_csv('Users.csv', usecols=['user_id', 'token'])
        self.concurrent_workers = concurrent_workers
        self._tasks: List[asyncio.Task] = []
        self.__gauth = gauth

    def print_ui(self, chat_id: int, mes: str):
        self.__UI_queue.put_nowait([chat_id, mes])

    async def registration(self, chat_id: int):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ. –ü—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ —Ç–æ–∫–µ–Ω
        –≤ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ pandas data frame Users.csv.
        –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º chat_id –∏ —Ç–æ–∫–µ–Ω –≤ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö.
        """
        if await self.find_id(chat_id):
            self.print_ui(chat_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        self.print_ui(chat_id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        upd = await self.queue.get()
        while True:
            token = upd.message.text
            await self.add_token(chat_id, token)
            self.print_ui(chat_id, "–ó–∞–ø–∏—Å–∞–ªüòâ")
            return

    async def get_portfolio(self, chat_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ —Ç–æ–∫–µ–Ω—É,
        –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –≤ Users.csv –ø–æ chat_id
        """
        try:
            users_to_loc = self.__users.set_index(['user_id'])
            token = users_to_loc.loc[chat_id].token
            print(token)
            with Client(token) as client:
                us = User(token, client, gauth=self.__gauth)
                portfolio = us.df_to_url(us.get_portfolio(account_id=us.get_account_id()))
                self.print_ui(chat_id, portfolio)
                us.deleate_file()
        except:
            self.print_ui(chat_id, "–¢–æ–∫–µ–Ω –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")

    async def buy_paper(self, chat_id: int):
        """
        –ü–æ–∫—É–ø–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –±—É–º–∞–≥—É –ø–æ figi –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–æ–∫–µ–Ω–æ–º,
        –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≤ Users.csv –ø–æ chat_id
        """
        self.print_ui(chat_id, "–£–∫–∞–∂–∏ figi –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å\n"
                               "Figi - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–∂–¥–æ–π –±—É–º–∞–≥–∏, –µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
        upd = await self.queue.get()
        figi = upd.message.text
        self.print_ui(chat_id, f"–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ —Å figi: {figi}, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å")
        upd = await self.queue.get()
        amount = upd.message.text
        users_to_loc = self.__users.set_index(['user_id'])
        token = users_to_loc.loc[chat_id].token
        try:
            with Client(token) as client:
                us = User(token, client, gauth=self.__gauth)
                us.buy(account_id=us.get_account_id(), figi=figi, amount=int(amount))
                self.print_ui(chat_id, "–ë—É–º–∞–≥–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞, –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Ä—Ñ—Ç–æ–ª–∏–æ")
        except FigiError:
            self.print_ui(chat_id, "Figi –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")
        except AmountError:
            self.print_ui(chat_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")


    async def plot(self, chat_id: int):
        """
        –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫ –±—É–º–∞–≥–∏ –ø–æ figi –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–æ–∫–µ–Ω–æ–º,
        –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≤ Users.csv –ø–æ chat_id
        """
        self.print_ui(chat_id, "–£–∫–∞–∂–∏ figi –±—É–º–∞–≥–∏, –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å")
        upd = await self.queue.get()
        figi = upd.message.text
        users_to_loc = self.__users.set_index(['user_id'])
        token = users_to_loc.loc[chat_id].token
        try:
            users_to_loc = self.__users.set_index(['user_id'])
            token = users_to_loc.loc[chat_id].token
            print(token)
            with Client(token) as client:
                us = User(token, client, gauth=self.__gauth)
                url = us.get_candels(figi=figi)
                self.print_ui(chat_id, url)
                us.deleate_file()
        except:
            self.print_ui(chat_id, "Figi –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º")

    async def distribution(self, upd: UpdateObj):
        mes = upd.message.text
        chat_id = upd.message.chat.id
        if mes == '/start':
            await self.registration(chat_id)
        elif mes != "" and not await self.find_id(chat_id):
            self.print_ui(chat_id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                                   "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–∞–ø–∏—à–∏ /start –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è")
        elif mes == "/portfolio":
            await self.get_portfolio(chat_id)
        elif mes == "/buy":
            await self.buy_paper(chat_id)
        elif mes == "/plot":
            await self.plot(chat_id)
        else:
            self.print_ui(chat_id, "–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ –º–µ–Ω—é")

    async def _worker(self):
        while True:
            upd = await self.queue.get()
            chat_id = upd.message.chat.id
            #print(upd)
            try:
                await self.distribution(upd)
            finally:
                self.queue.task_done()

    async def start(self):
        self._tasks = [asyncio.create_task(self._worker()) for _ in range(self.concurrent_workers)]

    async def stop(self):
        await self.queue.join()
        for t in self._tasks:
            t.cancel()

    async def add_token(self, user_id: int, token=0):
        self.__users = self.__users.append({'user_id': user_id, 'token': token}, ignore_index=True)
        print(self.__users)
        # self.__users.to_csv('Users.csv')

    async def find_id(self, user_id: int):
        return any(self.__users.user_id == user_id)